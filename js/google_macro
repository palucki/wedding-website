var RECIPENTS = ["piotrek.palucki@gmail.com", "w.brachucy@gmail.com"]; // emails to send the form data to
// var RECIPENTS = ["piotrek.palucki@gmail.com"]; // emails to send the form data to

/**
 * This method is the entry point.
 */
function doPost(e) {

  try {
    Logger.log(e); // the Google Script version of console.log see: Class Logger
    
    var mailData = e.parameters; // just create a slightly nicer variable name for the data
     
    record_data(e);

    for (var i = 0; i < RECIPENTS.length; i++) {
      MailApp.sendEmail({
        to: RECIPENTS[i],
        subject: "Kolejna osoba odpowiedziala na Wasze zaproszenie",
        replyTo: String(mailData.email), // This is optional and reliant on your form actually collecting a field named `email`
        htmlBody: formatMailBody(mailData)
      });
    }
  
    MailApp.sendEmail({
        to: String(mailData.email),
        subject: "Potwierdzenie wypełnienia formularza",
        replyTo: String(RECIPENTS[0]), // This is optional and reliant on your form actually collecting a field named `email`
        htmlBody: "Serdecznie dziękujemy za wypełnienie formularza i wysłanie nam informacji.<br><br>Pozdrawiamy<br>Weronika i Piotr ❤️"
      });

    return ContentService    // return json success results
          .createTextOutput(JSON.stringify({"result":"success","data": JSON.stringify(e.parameters), "debug": "" }))
          .setMimeType(ContentService.MimeType.JSON);
  } catch(error) { // if error return this
    Logger.log(error);
    return ContentService
          .createTextOutput(JSON.stringify({"result":"error", "message": "Sorry, there is an issue with the server."}))
          .setMimeType(ContentService.MimeType.JSON);
  }
}

/**
 * This method inserts the data received from the html form submission
 * into the sheet. e is the data received from the POST
 */
function record_data(e) {

  Logger.log(JSON.stringify(e)); // log the POST data in case we need to debug it
  try {
    var doc     = SpreadsheetApp.getActiveSpreadsheet();
    var sheet   = doc.getSheetByName('odpowiedzi'); // select the responses sheet
    var headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
   
    let email = e.parameters.email;
    var input_size = e.parameters['name'].length;

    for (var r = 0; r < input_size; r++) {
      var row     = [ new Date().toUTCString() ]; 
      // e.parameters['email'][r] = email;
      // first element in the row should always be a timestamp, then name and invite_code
      // loop through the header columns
      for (var i = 1; i < headers.length; i++) { // start at 1 to avoid Timestamp column
        if(headers[i].length > 0) {
          row.push(e.parameters[headers[i]][r]); // add data to row
        }
      }
      // more efficient to set values as [][] array than individually
      var nextRow = sheet.getLastRow() + 1; // get next row
      sheet.getRange(nextRow, 1, 1, row.length).setValues([row]);
    }
  }
  catch(error) {
    Logger.log(error);
    Logger.log(e);
    throw error;
  }
  finally {
    return;
  }
}


/**
 * This method is just to prettify the email.
 */
function formatMailBody(obj) { // function to spit out all the keys/values from the form in HTML
  var result = "Osoba z adresem email " + obj['email'] + " wysłała informację o: " + obj['name'].join(', ');
  // for (var key in obj) { // loop over the object passed to the function
  //   result += "<h4 style='text-transform: capitalize; margin-bottom: 0'>" + key + "</h4><div>" + obj[key] + "</div>";
  //   // for every key, concatenate an `<h4 />`/`<div />` pairing of the key name and its value, 
  //   // and append it to the `result` string created at the start.
  // }
  return result; // once the looping is done, `result` will be one long string to put in the email body
}/** @OnlyCurrentDoc */